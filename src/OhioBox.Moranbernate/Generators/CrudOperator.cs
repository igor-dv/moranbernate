using System.Collections.Generic;
using OhioBox.Moranbernate.Mapping;
using System.Linq;

namespace OhioBox.Moranbernate.Generators
{
	internal static class CrudOperator<T>
		where T : class
	{
		static CrudOperator()
		{
			var map = MappingRepo<T>.GetMap();

			GetById = new CachedSqlCommandGenerator(new GetByIdGenerator<T>());
			Update = new CachedSqlCommandGenerator(new UpdateGenerator<T>());
			Insert = new CachedSqlCommandGenerator(new InsertGenerator<T>());
			Delete = new CachedSqlCommandGenerator(new DeleteGenerator<T>());

			if (!map.HasAutoGeneratedId())
				Upsert = new CachedSqlCommandGenerator(new UpsertGenerator<T>());
		}

		public static ISqlCommandGenerator GetById { get; set; }
		public static ISqlCommandGenerator Update { get; set; }
		public static ISqlCommandGenerator Insert { get; set; }
		public static ISqlCommandGenerator Delete { get; set; }
		public static ISqlCommandGenerator Upsert { get; set; }

		private class CachedSqlCommandGenerator : ISqlCommandGenerator
		{
			private readonly IEnumerable<Property> _columns;
			private readonly string _sql;

			public CachedSqlCommandGenerator(ISqlCommandGenerator generator)
			{
				_sql = generator.GetSql();
				_columns = generator.GetColumns().ToArray();
			}

			public string GetSql()
			{
				return _sql;
			}

			public IEnumerable<Property> GetColumns()
			{
				return _columns;
			}
		}
	}
}