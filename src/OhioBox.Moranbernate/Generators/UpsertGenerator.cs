using System;
using System.Collections.Generic;
using System.Linq;
using OhioBox.Moranbernate.Mapping;

namespace OhioBox.Moranbernate.Generators
{
	internal class UpsertGenerator<T> : ISqlCommandGenerator
		where T : class
	{
		private readonly ClassMap<T> _map;

		public UpsertGenerator()
		{
			_map = MappingRepo<T>.GetMap();
		}

		public string GetSql()
		{
			if (_map.HasAutoGeneratedId())
				throw new UpsertNotSupportedOnAutoGeneratedIdTypesException(typeof(T));

			int[] i = { 0 };

			var ids = _map
				.Identifiers
				.Where(x => !x.ReadOnly)
				.Select(x => _map.CreateParameter("p" + i[0]++))
				.ToArray();

			var update = _map
				.Properties
				.Where(x => !x.ReadOnly)
				.Select(x => new { name = x.ColumnName, param = _map.CreateParameter("p" + i[0]++) })
				.ToArray();

			if (update.Length == 0)
				return string.Format("INSERT IGNORE INTO {0}({1}) VALUES ({2});",
					_map.TableName,
					string.Join(", ", GetColumns().Select(x => x.ColumnName)),
					string.Join(", ", ids.Concat(update.Select(x => x.param)))
				);

			return string.Format("INSERT INTO {0}({1}) VALUES ({2}) ON DUPLICATE KEY UPDATE {3};",
				_map.TableName,
				string.Join(", ", GetColumns().Select(x => x.ColumnName)),
				string.Join(", ", ids.Concat(update.Select(x => x.param))),
				string.Join(", ", update.Select(x => x.name + " = " + x.param))
			);
		}

		public IEnumerable<Property> GetColumns()
		{
			return _map
				.Identifiers
				.Concat(_map.Properties)
				.Where(x => !x.ReadOnly);
		}
	}

	public class UpsertNotSupportedOnAutoGeneratedIdTypesException : Exception
	{
		public UpsertNotSupportedOnAutoGeneratedIdTypesException(Type type) : base(CreateMessage(type))
		{
		}

		private static string CreateMessage(Type type)
		{
			return "Can't support upsert for a table with an identity column, type: " + type.FullName;
		}
	}
}