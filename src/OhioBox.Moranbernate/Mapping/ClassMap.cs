using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using OhioBox.Moranbernate.Utils;

namespace OhioBox.Moranbernate.Mapping
{
	public class ClassMapBase
	{
		protected ClassMapBase(Type type, IDialect dialect)
		{
			Type = type;
			Identifiers = new List<Property>();
			Properties = new List<Property>();
			Dialect = dialect;
		}

		internal Type Type { get; private set; }
		internal string TableName { get; private set; }
		internal IDialect Dialect { get; private set; }

		internal IList<Property> Identifiers { get; private set; }
		internal IList<Property> Properties { get; private set; }

		public void Table(string name)
		{
			TableName = Dialect.EscapeTable(name);
		}
	}

	internal static class ClassMapBaseExt
	{
		public static string CreateParameter(this ClassMapBase map, string name)
		{
			return map.Dialect.CreateParameter(name);
		}

		public static bool HasAutoGeneratedId(this ClassMapBase map)
		{
			return map.Identifiers.Count == 1 && map.Identifiers[0].Insert == false;
		}
	}

	public class ClassMap<T> : ClassMapBase
		where T : class
	{
		public ClassMap()
			: this(Dialects.MySql)
		{
		}

		public ClassMap(IDialect dialect = null)
			: base(typeof(T), dialect ?? Dialects.MySql)
		{
		}

		public IdOptions Id<TOut>(Expression<Func<T, TOut>> expression, string columnName = null)
		{
			var property = GetProperty(expression, columnName);
			Identifiers.Add(property);
			var idOptions = new IdOptions(property);

			if (!typeof(TOut).GetTypeInfo().IsPrimitive)
				idOptions.GeneratedBy.Assigned();

			return idOptions;
		}

		public IProperty Map<TOut>(Expression<Func<T, TOut>> expression, string columnName = null)
		{
			var property = GetProperty(expression, columnName);
			Properties.Add(property);
			return property;
		}

		private Property GetProperty<TOut>(Expression<Func<T, TOut>> expression, string columnName)
		{
			var property = ExpressionProcessor<T>.FindMemberExpression(expression);
			property.ColumnName = Dialect.EscapeColumn(columnName ?? property.Name);
			return property;
		}

		public CompositeId<T> CompositeId()
		{
			return new CompositeId<T>(this);
		}

		public override string ToString()
		{
			var identifiresNames = Identifiers?.Select(x => x.Name).ToList();
			var propertiesNames = Properties?.Select(x => x.Name).ToList();

			if (identifiresNames == null)
				identifiresNames = new List<string>();

			if (propertiesNames == null)
				propertiesNames = new List<string>();

			return $"Type: {Type?.Name},\r\nTable Name: {TableName},\r\n Dialect Table Name: {Dialect.EscapeTable(TableName)}, \r\nIdentifiers: {string.Join(",", (identifiresNames))}, \r\nProperties: {string.Join(",", propertiesNames)}";
		}
	}
}